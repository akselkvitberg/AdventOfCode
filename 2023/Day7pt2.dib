#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

I could not find a better way to handle both parts in one file

#!fsharp

#load "util.fsx"
open Utils

let input = GetData 7

#!fsharp

let example = GetExample 7 1
example

#!fsharp

type Card = 
| A = 14 
| K = 13
| Q = 12
| J = 1
| T = 10

type Hand = Card list

type Pairing =
| FiveOfAKind
| FourOfAKind
| FullHouse
| ThreeOfAKind
| TwoPair
| OnePair
| HighCard

#!fsharp

let parseCard (card: char) =
    match card with
    | 'A' -> Card.A
    | 'K' -> Card.K
    | 'Q' -> Card.Q
    | 'J' -> Card.J
    | 'T' -> Card.T
    | c -> enum<Card> (int (string c))

parseCard 'A', parseCard '9'

#!fsharp

let parseHand hand =
    match hand with
    | Regex "(.....) (\d+)" [cards; Int bid] -> 
        let hand = cards |> Seq.map parseCard |> Seq.toList
        hand, bid
    | _ -> failwith $"Bad hand: {hand}"

let parse input =
    input
    |> GetLines
    |> Array.map parseHand

parse example

#!fsharp

let getPairing (hand:Hand) =
    let data = hand |> List.countBy id |> List.sortByDescending fst |> List.sortByDescending snd
    //printfn "%A" data
    match data with
    | (_,5) :: _ -> FiveOfAKind
    | (_,4) :: (Card.J, 1) :: _ -> FiveOfAKind
    | (_,3) :: (Card.J, 2) :: _ -> FiveOfAKind
    | (Card.J,3) :: (_, 2) :: _ -> FiveOfAKind
    | (Card.J,4) :: (_, 1) :: _ -> FiveOfAKind

    | (_,4) :: _ -> FourOfAKind
    | (_,3) :: _ :: (Card.J, 1) :: _ -> FourOfAKind
    | (_,2) :: (Card.J, 2) :: _ -> FourOfAKind
    | (Card.J,3) :: _ -> FourOfAKind

    | (_,3) :: (_,2) :: _ -> FullHouse
    | (_,2) :: (_,2) :: (Card.J, 1) :: _ -> FullHouse

    
    | (_,3) :: _ -> ThreeOfAKind
    | (_,2) :: (_,1) :: (Card.J, 1) :: _ -> ThreeOfAKind
    | (_,2) :: (_,1) :: (_,1) :: (Card.J, 1) :: _ -> ThreeOfAKind
    | (Card.J,2) :: _ -> ThreeOfAKind

    | (_,2) :: (_,2) :: _ -> TwoPair

    | (_,2) :: _ -> OnePair
    | (_,1) :: (_,1) :: (_,1) ::(_,1) :: (Card.J, 1) :: _ -> OnePair
    | (_,1) :: _ -> HighCard
    | _ -> failwith "How can you get something else?"

parse example
|> Array.sortBy (fst >> getPairing)

#!fsharp

let compareHands (handA:Hand, _) (handB:Hand, _) =
    
    let rec compare a b =
        match a,b with
        | a1::ax, b1::bx when a1 = b1 -> compare ax bx
        | a1::ax, b1::bx when a1 < b1 -> -1
        | _ -> 1

    compare handA handB

let getWinnings input =
    input
    |> parse
    |> Seq.sortWith (compareHands)
    |> Seq.sortByDescending (fst >> getPairing)
    |> Seq.map snd
    |> Seq.mapi (fun i x -> (i+1) * x)
    |> Seq.sum

getWinnings example

#!fsharp

getWinnings input
