#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#load "util.fsx"
open Utils

let input = GetData 2 |> Split "," |> Array.map int
input

#!fsharp

let execute operation (program: int array) position =
    let i1 = program[position + 1]
    let i2 = program[position + 2]
    let i3 = program[position + 3]
    //printfn "%A %d %d %d %d" program position i1 i2 i3
    program[i3] <- operation (program[i1]) (program[i2])
    //printfn "%A %d %d %d" program i1 i2 i3
    program

let run program =
    let program = Array.copy program
    let step counter = 
        match program[counter] with
        | 1 -> Some (execute (+) program counter, counter+4)
        | 2 -> Some (execute (*) program counter, counter+4)
        | 99 -> None
        | _ -> failwith $"unhandled opcode {counter} {program[counter]}"

    let _ = Array.unfold step 0
    program[0]
    
run [|1;9;10;3;2;3;11;0;99;30;40;50|]

#!fsharp

let modifyAndRun program noun verb = 
    let modifiedProgram = Array.copy input
    modifiedProgram[1] <- noun
    modifiedProgram[2] <- verb
    run modifiedProgram

modifyAndRun input 12 2

#!fsharp

[|0..99|] |> Array.collect (fun n -> [|0..99|] |> Array.map (fun v -> (n, v)))
|> Array.find (fun (n,v) -> (modifyAndRun input n v) = 19690720)
|> fun (n,v) -> n*100 + v
