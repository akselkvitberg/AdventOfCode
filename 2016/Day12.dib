#!fsharp

#load "util.fsx"
open Utils

let input = GetData 12 |> GetLines
input[..5]

#!fsharp

let example = [|
    "cpy 41 a"
    "inc a"
    "inc a"
    "dec a"
    "jnz a 2"
    "dec a"
|]

#!fsharp

type Pointer = Register of string | Value of int

type Instruction =
    | Copy of Pointer * string
    | Increase of string
    | Decrease of string
    | JumpNotZero of Pointer * int

#!fsharp

let parse = 
    function
    | Regex "cpy (\d+) (.+)" [Int value; register] -> Copy(Value(value), register)
    | Regex "cpy (.+) (.+)" [source; register] -> Copy(Register(source), register)
    | Regex "inc (.+)" [register] -> Increase(register)
    | Regex "dec (.+)" [register] -> Decrease(register)
    | Regex "jnz (\d+) (-?\d+)" [Int value; Int offset] -> JumpNotZero(Value(value), offset)
    | Regex "jnz (.+) (-?\d+)" [register; Int offset] -> JumpNotZero(Register(register), offset)
    | a -> failwithf "Unexpected %s" a

example |> Seq.map parse

#!fsharp

(input |> Array.map parse)[0..5]

#!fsharp

let rec runCycle (registers:Map<string, int>) (inputs:Instruction array) PC =
    if PC >= inputs.Length
    then registers
    else
        let input = inputs[PC]
        match input with
        | Copy(Value(value), register) -> runCycle (registers.Add(register, value)) inputs (PC + 1)
        | Copy(Register(pointer), register) -> runCycle (registers.Add(register, registers[pointer])) inputs (PC + 1)
        | Increase(register) -> runCycle (registers.Change(register, function | Some v -> Some (v + 1) | None -> Some 1)) inputs (PC + 1)
        | Decrease(register) -> runCycle (registers.Change(register, function | Some v -> Some (v - 1) | None -> Some -1)) inputs (PC + 1)
        | JumpNotZero(Register(register), offset) -> if registers[register] = 0 then runCycle registers inputs (PC + 1) 
                                                                      else runCycle registers inputs (PC + offset)
        | JumpNotZero(Value(value), offset) -> if value = 0 then runCycle registers inputs (PC + 1) 
                                                                      else runCycle registers inputs (PC + offset)
                                                                      

let registers = Map.empty.Add("a", 0).Add("b", 0).Add("c", 0).Add("d", 0)

runCycle registers (example |> Array.map parse) 0

#!fsharp

runCycle (registers.Add("c", 1)) (input |> Array.map parse) 0
