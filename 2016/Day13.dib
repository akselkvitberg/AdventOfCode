#!fsharp

#load "util.fsx"
open Utils

let input = GetData 13 |> int
let initialPosition = (1,1)

#!fsharp

let magicNumber = input

#!fsharp

let isPassable (x,y) =
    let number = x*x + 3*x + 2*x*y + y + y*y + magicNumber
    let binaryRepresentation = Convert.ToString(number, 2)
    let numberOfOnes = binaryRepresentation |> Seq.where (fun x -> x = '1') |> Seq.length
    numberOfOnes % 2 = 0

let isPositive (x,y) = x >= 0 && y >= 0

let isValid pos = isPassable pos && isPositive pos

isPassable (7,4)

#!fsharp

let findMoves (x,y) =
    [(x+1,y);(x-1,y);(x,y+1);(x,y-1)]

findMoves (1,1)
    

#!fsharp

0 |> Seq.unfold (fun x -> Some (x, x + 1)) |> Seq.take 5

#!fsharp

open System.Collections.Generic

let bfs =
    let visited = new HashSet<int*int>([(1,1)]);

    [(1,1)]
    |> Seq.unfold (fun pos -> 
        let moves = 
            pos
            |> Seq.collect findMoves
            |> Seq.filter visited.Add
            |> Seq.filter isValid
            |> Seq.distinct
            |> Seq.toList
        Some (moves, moves)) // somebody explain unfold to me plz
    |> Seq.cache

bfs
|> Seq.indexed
|> Seq.filter (fun (i,x) -> x |> List.exists ((=) (31, 39)))
|> Seq.head
|> fun x -> (x |> fst) + 1 // indexed is 0 based

#!fsharp

bfs
|> Seq.take 50
|> Seq.collect (fun x -> x)
|> Seq.length
|> fun x -> x + 1 // starting position
