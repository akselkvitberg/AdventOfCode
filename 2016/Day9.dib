#!fsharp

#load "util.fsx"
open Utils

let input = GetData 9
input |> Seq.length

#!fsharp

let example = [
    "ADVENT"
    "A(1x5)BC"
    "(3x3)XYZ"
    "A(2x2)BCD(2x2)EFG"
    "(6x1)(1x3)A"
    "X(8x2)(3x3)ABCY"
    "(27x12)(20x12)(13x14)(7x10)(1x12)A"
    "(25x3)(3x3)ABC(2x3)XY(5x2)PQRSTX(18x9)(3x2)TWO(5x7)SEVEN"
]

#!fsharp

let rec parseV1 input = 
    match input with 
    | Regex "(.*?)\((\d+)x(\d+)\)(.*)" [prefix; Int characters; Int times; rest] -> prefix + (String.Join( "", Seq.replicate times rest[0..characters-1])) + parseV1 rest[characters..]
    | a -> a

example |> Seq.map (fun x -> x, parseV1 x |> Seq.length, parseV1 x)

#!fsharp

input
|> parseV1
|> Seq.length

#!fsharp

let rec parseV2 (input:string) =
    match input with 
    | Regex "(.*?)\((\d+)x(\d+)\)(.*)" [prefix; Int characters; Int times; rest] -> prefix.Length + times * parseV2 rest
    | a -> a.Length

example
|> Seq.map (fun x -> x, parseV2 x)
