#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

#load "util.fsx"
open Utils
open System.Text.RegularExpressions

let input = GetData 9
input |> Seq.length

#!fsharp

let example = [
    "ADVENT"
    "A(1x5)BC"
    "(3x3)XYZ"
    "A(2x2)BCD(2x2)EFG"
    "(6x1)(1x3)A"
    "X(8x2)(3x3)ABCY"
    "(27x12)(20x12)(13x14)(7x10)(1x12)A"
    "(25x3)(3x3)ABC(2x3)XY(5x2)PQRSTX(18x9)(3x2)TWO(5x7)SEVEN"
]

#!fsharp

let rec decompressV1 input = 
    match input with 
    | Regex "(.*?)\((\d+)x(\d+)\)(.*)" [prefix; Int characters; Int times; rest] -> prefix + (String.Join( "", Seq.replicate times rest[0..characters-1])) + decompressV1 rest[characters..]
    | a -> a

example |> Seq.map (fun x -> x, decompressV1 x |> Seq.length, decompressV1 x)

#!fsharp

input
|> decompressV1
|> Seq.length

#!fsharp

let rec DecompressV2 (input:string) =
    match input with
    | RegexEx "\((\d+)x(\d+)\)" ([Int length; Long times], m) -> 
        let startIndex = m.Index + m.Length
        let text = input.Substring(startIndex, length)
        let rest = input.Substring(startIndex + length)
        int64 m.Index + (times * DecompressV2 text) + DecompressV2 rest
    | _ -> int64 input.Length

DecompressV2 input
