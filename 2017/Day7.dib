#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#load "util.fsx"
open Utils

let input = GetData 7 |> GetLines
input

#!fsharp

let examples = 
    """
pbga (66)
xhth (57)
ebii (61)
havc (66)
ktlj (57)
fwft (72) -> ktlj, cntj, xhth
qoyq (66)
padx (45) -> pbga, havc, qoyq
tknk (41) -> ugml, padx, fwft
jptl (61)
ugml (68) -> gyxo, ebii, jptl
gyxo (61)
cntj (57)
""" |> Split "\r\n"
examples

#!fsharp

type Node = string*int*string array

let parseLine line : Node =
    match line with
    | Regex @"(\w+) \((\d+)\) -> ([\w, ]+)" [id; Int weight; children] -> (id, weight, children |> Split "," |> Array.map (fun x -> x.Trim()))
    | Regex @"(\w+) \((\d+)\)" [id; Int weight;] -> (id, weight, Array.empty)
    | _ -> failwith $"Bad line: {line}"

examples
|> Array.map parseLine

#!fsharp

let findRoot (nodes:Node array) =
    let referencedNodes = nodes |> Array.collect (fun (_,_,n) -> n)
    let nodes = nodes |> Array.map (fun (n,_,_) -> n)
    nodes |> Array.except referencedNodes |> Array.exactlyOne

let exampleRoot = 
    examples
    |> Array.map parseLine
    |> findRoot
    
exampleRoot

#!fsharp

let root = 
    input
    |> Array.map parseLine
    |> findRoot

root

#!fsharp

type Result = 
| Sum of int
| MissingWeight of int

let rec balance (tree:Map<string, (int*string array)>) (node:string) =
    let (weight, children) = Map.find node tree

    match children with
    | [||] -> weight // no children, it's a leaf
    | children -> 
        let weights = children |> Array.map (balance tree) // weights, same index as children
        // let groups = weights |> Array.groupBy snd |> List.ofArray |> List.sortBy (fun (_,c) -> c.Length)
        // match groups with
        // | (x,x')::(y,y')::xs -> 
            
        //     failwith $"{node}, {weight}, {x} %A{x'}, {y} %A{y'}"
        // | _ -> (weights |> Array.sumBy snd) + weight

let findMissingTowerWeight root nodes =
    let tree = nodes |> Array.map (fun (id, w, children) -> id, (w, children)) |> Map.ofArray
    //Map.map (balance) tree
    balance tree root

examples
|> Array.map parseLine
|> findMissingTowerWeight exampleRoot

#!fsharp

let getSubTowers (tokens : string array) = if Array.length tokens = 2 then Array.empty else tokens.[3..] |> Array.map (fun c -> c.TrimEnd(','))
let asProgram line = line |> Split " " |> (fun tokens -> (tokens[0], (tokens[1].Trim('(',')') |> int, getSubTowers tokens)))

let rec findRoot tower currentProgram = 
    match Map.tryFindKey (fun _ (_, children) -> Array.contains currentProgram children) tower with
    | None -> currentProgram
    | Some parent -> findRoot tower parent

let rec getWeight tower node = 
    let weight, children = Map.find node tower
    weight + (Array.sumBy (getWeight tower) children)

let getChildrenWeights tower children = 
    children
    |> Seq.map (fun c -> (getWeight tower c, Map.find c tower |> fst)) 
    |> Seq.groupBy fst 
    |> Seq.sortByDescending (fun (k, g) -> Seq.length g) 
    |> Seq.toArray

let getMissingWeight tower = 
    tower 
    |> Map.map (fun _ (_, children) -> getChildrenWeights tower children)
    |> Map.toSeq
    |> Seq.filter (fun (_, v) -> (Array.length v) = 2)
    |> Seq.map (fun (_, v) -> (snd v.[1] |> Seq.head |> snd) + (fst v.[0]) - (fst v.[1]))
    |> Seq.min

let part1 tower =
    let head = Seq.head tower
    findRoot tower head.Key

//let solver = {parse = parseEachLine asProgram >> Map.ofSeq; part1 = part1; part2 = getMissingWeight}
examples |> Array.map asProgram |> Map.ofSeq |> getMissingWeight
