#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!fsharp

type SpellType = 
| MagicMissile
| Drain
| Shield
| Poison
| Recharge

type Spell = {
    Type: SpellType
    Cost: int
    Damage: int
    Heal: int
    Armor: int 
    Mana: int
    Poison: int
    Duration: int
}

type Game = {
    HP: int
    Mana: int
    BossHp: int
    BossDamage: int
    ActiveSpells: Spell list;
}

type Turn = Player | Boss
type Difficulty = Easy | Hard

#!fsharp

let spell = { Type = MagicMissile; Cost = 0;  Damage = 0; Heal = 0; Armor = 0; Mana = 0; Poison = 0; Duration = 1}

let allSpells = [
    { spell with Type = MagicMissile;  Cost = 53; Damage = 4 }
    { spell with Type = Drain;          Cost = 73; Damage = 2; Heal = 2 }
    { spell with Type = Shield;         Cost = 113; Armor = 7; Duration = 6 }
    { spell with Type = Poison;         Cost = 173; Poison = 3; Duration = 6 }
    { spell with Type = Recharge;       Cost = 229; Mana = 101; Duration = 5 }
]

#!fsharp

let game = {HP = 50; Mana = 500; BossHp = 55; BossDamage = 8; ActiveSpells = []}

#!fsharp

let rec NextTurn turn difficulty spentMana best (game:Game) = 
    if best < spentMana then best else
    if turn = Player && difficulty = Hard && game.HP <= 1 then best else

    let mana         = (game.ActiveSpells |> List.sumBy _.Mana) + game.Mana
    let poisonDamage = game.ActiveSpells |> List.sumBy _.Poison

    let bossHp = game.BossHp - poisonDamage
    if bossHp <= 0 then spentMana else

    let activeSpells =
        game.ActiveSpells
        |> List.map (fun s -> { s with Duration = s.Duration - 1 })
        |> List.filter (fun s -> s.Duration > 0)

    match turn with 
    | Player ->
        let affordableSpells = 
            allSpells
            |> List.filter (fun s -> s.Cost <= mana)
            |> List.filter (fun s -> activeSpells |> List.forall (fun x -> x.Type <> s.Type))

        match affordableSpells with
        | [] -> best
        | _ -> 
            affordableSpells
            |> List.fold (fun newBest s -> 
                let spentMana = spentMana + s.Cost
                let mana = mana - s.Cost

                let activeSpells = s::activeSpells
                
                let hp = match difficulty with 
                              | Easy -> game.HP + s.Heal
                              | Hard -> game.HP - 1 + s.Heal
                
                let bossHp = bossHp - s.Damage
                if bossHp <= 0 then 
                    min newBest spentMana
                else min newBest (NextTurn Boss difficulty spentMana newBest { game with HP = hp; Mana = mana; BossHp = bossHp; ActiveSpells = activeSpells; })
                ) best
    | Boss ->
        let armor = game.ActiveSpells |> List.sumBy _.Armor
        let damage = max (game.BossDamage - armor) 1
        let hp = game.HP - damage
        if hp <= 0 then best else
        NextTurn Player difficulty spentMana best { game with HP = hp; Mana = mana; ActiveSpells = activeSpells; BossHp = bossHp }

#!fsharp

NextTurn Player Easy 0 999999 game

#!fsharp

NextTurn Player Hard 0 999999 game
