#!fsharp

open System.Text.RegularExpressions
open System.IO

let inputs = File.ReadAllLines "Inputs/6.txt"

#!fsharp

let TurnOn  (position:int*int) grid  = grid |> Map.change position (fun x -> Some true)
let TurnOff (position:int*int) grid = grid |> Map.change position (fun x -> Some false)
let Toggle  (position:int*int) grid =
    grid |> Map.change position (fun x ->
        match x with
        | Some y -> Some (not y)
        | None -> Some true
    )

let map = Map [((0,1), true)]

map |> TurnOn (0,1) |> TurnOff (0,5) |> Toggle(0,5)

#!fsharp

let Range (line:string) = 
    let ints = [| for m in Regex.Matches(line, "(-?\d+)") -> int m.Value |]
    let xs = [ints[0]..ints[2]]
    let ys = [ints[1]..ints[3]]
    xs |> Seq.allPairs ys
Range "turn off 10,10 through 12,12"

#!fsharp

let Parse (line:string) = 
    if line.StartsWith("toggle") then Toggle
    elif line.StartsWith("turn on") then TurnOn
    else TurnOff
    
Parse "turn on 10,10 through 12,12" (1,1) Map.empty<(int*int), bool>

#!fsharp

let map = Map.empty<(int*int), bool>
let func = Parse "turn on"
let range = Range "turn on 10,10, through 12,12"

let operations = range |> Seq.map func

let apply map func = map |> func

operations |> Seq.fold apply map

#!fsharp

let GetOperations line =
    let func = Parse line
    let range = Range line
    range |> Seq.map func

let operations = inputs |> Seq.collect GetOperations

let map = Map.empty<(int*int), bool>
operations |> Seq.fold apply map |> Map.filter (fun x y -> y) |> Map.count
