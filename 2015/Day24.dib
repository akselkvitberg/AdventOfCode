#!fsharp

let input = [1;3;5;11;13;17;19;23;29;31;41;43;47;53;59;61;67;71;73;79;83;89;97;101;103;107;109;113] |> Seq.map uint64 |> Seq.toList

let QuantumEntanglement (list:uint64 list) = list |> Seq.reduce (*)

groupWeight

#!fsharp

let rec GetCombinations groupWeight total group1 (list:uint64 list) = 
    seq {
        match list with
        | [a] when total + a = groupWeight -> yield a::group1 
        | a::tail ->
            if total + a < groupWeight 
            then yield! GetCombinations groupWeight (total + a) (a::group1) tail
            else ()
            yield! GetCombinations groupWeight total group1 tail
        | _ when total = groupWeight -> yield group1
        | _ -> ()
    }

#!fsharp

let GetQuantumBalance compartments =
    let groupWeight = (input |> Seq.sum) / uint64 compartments

    GetCombinations groupWeight 0UL [] input 
    |> Seq.cache
    |> Seq.sortBy (fun x -> QuantumEntanglement x, Seq.length x)
    |> Seq.map QuantumEntanglement
    |> Seq.head

GetQuantumBalance 3

#!fsharp

GetQuantumBalance 4
