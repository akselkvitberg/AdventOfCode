#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#load "util.fsx"
open Utils

let input = GetData 16 |> GetLines
input[0]

#!fsharp

let example = 
    """
Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II
    """
    |> GetLines

#!fsharp

type Valve = {
    FlowRate: int
    Open: bool
    Tunnels: string array
}

let parse =
    let parse_line line = 
        match line with
        | Regex "Valve (\w\w) has flow rate=(\d+); tunnels? leads? to valves? (.*)" [valve; Int rate; direction] -> valve, {FlowRate = rate; Open = false; Tunnels = direction |> Split ","}
        | _ -> failwith line
    
    Array.map parse_line >> Map.ofArray

parse example

#!fsharp

let traverse valves =

    let rec traverse' valves current =
        let valve = valves |> Map.find current
        if valve.Open then valves
        else traverse' (valves |> Map.add current { valve with Open = true}) current
    
    traverse' valves "AA"

example
|> parse
|> traverse
