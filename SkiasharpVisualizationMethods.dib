#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!fsharp

#r "nuget: SkiaSharp"
open SkiaSharp

#!fsharp

let mutable surface = SKSurface.Create(SKImageInfo(256, 256))
let mutable strokePaint = new SKPaint(Color = SKColors.Transparent, IsAntialias = true, IsStroke = true)
let mutable fillPaint = new SKPaint(Color = SKColors.Black, IsAntialias = true)

let size width height =
    let newSurface = SKSurface.Create(SKImageInfo(width, height))
    newSurface.Canvas.DrawSurface(surface, SKPoint.Empty)
    surface <- newSurface

let strokeWeight size =
    strokePaint <- new SKPaint(Color = strokePaint.Color, IsAntialias = true, StrokeWidth = float32 size, IsStroke = true, StrokeCap = strokePaint.StrokeCap)

let stroke color =
    strokePaint <- new SKPaint(Color = color, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = strokePaint.StrokeCap)

let noStroke () =
    strokePaint <- new SKPaint(Color = SKColors.Transparent, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = strokePaint.StrokeCap)

let strokeCap cap = 
    strokePaint <- new SKPaint(Color = strokePaint.Color, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = cap)

let fill color =
    fillPaint <- new SKPaint(Color = color, IsAntialias = true)
let noFill () = fillPaint <- new SKPaint(IsAntialias = true, Color = SKColors.Transparent)

let clear (color: SKColor) =
    surface.Canvas.Clear(color)

let rect x y width height =
    let rect = SKRect.Create(float32 x, float32 y, float32 width, float32 height)
    surface.Canvas.DrawRect(rect, fillPaint);
    surface.Canvas.DrawRect(rect, strokePaint);

let circle x y radius =
    let circle = new SKRect(float32 (x - radius), float32 (y - radius), float32 (x + radius), float32 (y + radius))
    surface.Canvas.DrawOval(circle, fillPaint);
    surface.Canvas.DrawOval(circle, strokePaint);

let line x1 y1 x2 y2 =
    let p1 = new SKPoint(float32 x1, float32 y1)
    let p2 = new SKPoint(float32 x2, float32 y2)
    surface.Canvas.DrawLine(p1, p2, strokePaint) 

clear SKColors.White
fill SKColors.Red
stroke SKColors.Black
strokeWeight 0.4
rect 0 0 80 80
noFill ()
strokeWeight 3
circle 100 100 40
stroke SKColors.Blue
strokeWeight 10
strokeCap SKStrokeCap.Round
line 0 0 100 100

let data = surface.Display()

#!fsharp

clear SKColors.White

noFill()
stroke SKColors.Black
circle 128 128 50
circle 128 128 60
circle 128 128 70
circle 128 128 80
surface

#!fsharp

let data = surface.Display()
fill SKColors.Black
stroke SKColors.White
strokeWeight 1

for y in 0..10 do
for x in 0..10 do
    rect (x * 20) (y * 20) 20 20
    System.Threading.Thread.Sleep 100
    data.Update(surface)

#!csharp

#r "nuget: SkiaSharp"
using SkiaSharp;

#!csharp

var surface = SKSurface.Create(new SKImageInfo(256, 256));
var strokePaint = new SKPaint { Color = SKColors.Transparent, IsAntialias = true, IsStroke = true };
var fillPaint = new SKPaint { Color = SKColors.Black, IsAntialias = true };

void Size(int width, int height)
{
    var newSurface = SKSurface.Create(new SKImageInfo(width, height));
    newSurface.Canvas.DrawSurface(surface, SKPoint.Empty);
    surface = newSurface;
}

void StrokeWeight(float size)
{
    strokePaint = new SKPaint { Color = strokePaint.Color, IsAntialias = true, StrokeWidth = size, IsStroke = true, StrokeCap = strokePaint.StrokeCap };
}

void Stroke(SKColor color)
{
    strokePaint = new SKPaint { Color = color, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = strokePaint.StrokeCap };
}

void NoStroke()
{
    strokePaint = new SKPaint { Color = SKColors.Transparent, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = strokePaint.StrokeCap };
}

void StrokeCap(SKStrokeCap cap)
{
    strokePaint = new SKPaint { Color = strokePaint.Color, IsAntialias = true, StrokeWidth = strokePaint.StrokeWidth, IsStroke = true, StrokeCap = cap };
}

void Fill(SKColor color)
{
    fillPaint = new SKPaint { Color = color, IsAntialias = true };
}

void NoFill()
{
    fillPaint = new SKPaint { IsAntialias = true, Color = SKColors.Transparent };
}

void Clear(SKColor color)
{
    surface.Canvas.Clear(color);
}

void Rect(float x, float y, float width, float height)
{
    var rect = SKRect.Create(x, y, width, height);
    surface.Canvas.DrawRect(rect, fillPaint);
    surface.Canvas.DrawRect(rect, strokePaint);
}

void Circle(float x, float y, float radius)
{
    var circle = new SKRect(x, y, x + radius, y + radius);
    surface.Canvas.DrawOval(circle, fillPaint);
    surface.Canvas.DrawOval(circle, strokePaint);
}

void Line(float x1, float y1, float x2, float y2)
{
    var p1 = new SKPoint(x1, y1);
    var p2 = new SKPoint(x2, y2);
    surface.Canvas.DrawLine(p1, p2, strokePaint);
}

Clear(SKColors.White);
Fill(SKColors.Red);
Stroke(SKColors.Black);
StrokeWeight(0.4f);
Rect(0, 0, 80, 80);
NoFill();
StrokeWeight(3);
Circle(100, 100, 40);
Stroke(SKColors.Blue);
StrokeWeight(10);
StrokeCap(SKStrokeCap.Round);
Line(0, 0, 100, 100);

var data = surface.Snapshot().Display();

Fill(SKColors.Black);
Stroke(SKColors.White);
StrokeWeight(1);

for (int y = 0; y <= 10; y++)
{
    for (int x = 0; x <= 10; x++)
    {
        Rect(x * 20, y * 20, 20, 20);
        System.Threading.Thread.Sleep(100);
        // Update the display with the new surface
        data.Update(surface);
    }
}

#!csharp

void UpdateMethod() {
    Clear(new SKColor((byte)Random.Shared.Next(255), (byte)Random.Shared.Next(255), (byte)Random.Shared.Next(255)));
    //Clear(SKColors.White);
}
surface.Display()

#!csharp

using Microsoft.DotNet.Interactive;
var display = surface.Display();

await Task.Run(async () =>
{
    for (int i = 0; i < 10; i++)
    {
        UpdateMethod();
        await Task.Delay(1000);
        display.Update(surface);
        if(KernelInvocationContext.Current.CancellationToken.IsCancellationRequested)
        {
            break;
        }
    }
});

#!csharp

using System.Diagnostics;
Task Run(int fps, Action<double> update) {
    var delay = 1000 / fps;
    var display = surface.Display();
    return Task.Run(async () =>
    {
        Stopwatch stopwatch = Stopwatch.StartNew();
        while (KernelInvocationContext.Current.CancellationToken.IsCancellationRequested == false)
        {
            update(stopwatch.Elapsed.TotalSeconds);
            await Task.Delay(delay);
            display.Update(surface);
        }
    });
}

await Run(60, (time) => {
    Clear(SKColors.White);
    Circle(50, 50, 100 + (float)Math.Sin(time) * 50);
});
